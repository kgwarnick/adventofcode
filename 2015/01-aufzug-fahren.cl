;; Advent of Code 2015, https://adventofcode.com/2015
;; https://adventofcode.com/2015/day/1  "Not Quite Lisp"

;; Einzelnen Anweisungs-Schritt ausführen
;; Rückgabewert: Anzahl Stockwerke nach oben, negative Werte heißt nach unten
(defun 1-fahrt (schritt-anweisung)
 (cond ((eq schritt-anweisung #\( ) 1)
       ((eq schritt-anweisung #\) ) -1)
       (t 0)
 )
)

;; Folge von Anweisungen ausführen (rekursiv)
;; Rückgabewert: Anzahl Stockwerke nach oben, negative Werte nach unten
(defun fahrten-rekursiv (anweisungen)
 (if (> (length anweisungen) 1)
  (+ (1-fahrt (char anweisungen 0)) (fahrten-rekursiv (subseq anweisungen 1)))
  (if (> (length anweisungen) 0) (1-fahrt (char anweisungen 0)) 0) ))

;; Folge von Anweisungen ausführen (iterativ)
(defun fahrten-iterativ (anweisungen)
  (do ((stockwerk 0 (+ stockwerk (1-fahrt (char restliche-anweisungen 0))))
       (restliche-anweisungen anweisungen (subseq restliche-anweisungen 1)))
    ((<= (length restliche-anweisungen) 0) stockwerk)))

;; Wann wird zum ersten Mal ein bestimmtes Stockwerk erreicht
(defun fahre-bis (wohin anweisungen)
  (do ((wie-viele 0 (1+ wie-viele))
       (stockwerk 0 (+ stockwerk (1-fahrt (char verbleibende-anweisungen 0))))
       (verbleibende-anweisungen anweisungen (subseq verbleibende-anweisungen 1)))
    ((eq stockwerk wohin) wie-viele)))


;; Einzelnen Testfall ausführen
(defun test-runner (aktion argumente erwartetes-ergebnis)
  (let ((tatsächliches-ergebnis (apply aktion argumente)))
    (princ "Argumente: ") (dolist (s argumente) (princ s) (princ " "))
    (princ " -> Ergebnis: ") (princ tatsächliches-ergebnis)
    (princ ", erwartet: ") (princ erwartetes-ergebnis)
    (terpri)
    (eq erwartetes-ergebnis tatsächliches-ergebnis)))


(write-line "----- Aufzug-Fahren -----")

(write-line "--- Kurz-Tests ---")

(write "* Einzelne Anweisung: (  -> ")
(write (1-fahrt #\( )) (terpri)

(princ "* Längere Anweisung: ())( -> ")
(write (fahrten-iterativ "())(")) (terpri)

; Assozationsliste mit Beispielen
(write-line "--- Test-Fälle ---")
(setf beispiele '(
  ("(())" . 0)
  ("()()" . 0)
  ("(((" . 3)
  ("(()(()(" . 3)
  ("))(((((" . 3)
  ("())" . -1)
  ("))(" . -1)
  (")))" . -3)
  (")())())" . -3)
))

; Beispiele ausführen
(dolist (bsp beispiele t)
  (if (test-runner 'fahrten-iterativ (list (car bsp)) (cdr bsp))
    (write-line "PASSED")
    (write-line "FAILED")))

; Teil 2: Wann ist zum ersten Mal das erste Untergeschoss erreicht?
(write-line "--- Keller-Beispiele ---")
(setf keller-beispiele '(
  (")" . 1)
  ("()())" . 5)
))
(dolist (bsp keller-beispiele t)
  (if (test-runner 'fahre-bis (list -1 (car bsp)) (cdr bsp))
    (write-line "PASSED")
    (write-line "FAILED")))


; Aufgabe von https://adventofcode.com/2015/day/1/input
(write-line "")
(write-line "--- Aufgabe ---")
(setf aufgabe "(((())))()((((((((())()(()))(()((((()(()(((()((()((()(()()()()()))(((()(()((((((((((())(()()((())()(((())))()(()(()((()(()))(()()()()((()((()(((()()(((((((()()())()((((()()(((((()(())()(())((())()()))()(((((((())(()())(()(((())(()))((())))(()((()())))()())((((())))(()(((((()(())(((()()((()((()((((((((((())(()())))))()))())()()((((()()()()()()((((((())())(((()())()((()()(((()()()))(((((()))(((()(()()()(()(()(((())()))(()(((()((())()(()())())))((()()()(()()(((()))(((()((((()(((((()()(()())((()())())(()((((((()(()()))((((()))))())((())()()((()(()))))((((((((()))(()()(((())())(())()((()()()()((()((()((()()(((())))(()((())()((((((((()((()(()()(((())())())))(())())))()((((()))))))())))()()))()())((()())()((()()()))(()()(((()(())((((())())((((((((()()()()())))()()()((((()()))))))()((((()(((()))(()()())))((()()(((()))()()())())(((())((()()(())()()()(((())))))()())((()))()))((())()()())()())()()(()))())))())()))(())((()(())))(()(())(()))))(()(())())(()(())(()(()))))((()())()))()((((()()))))())))()()())((())()((()()()))()(((()(()))))(())()()))(((()())))))))))(((())))()))())()))))()()(((())))))))()(()()(()))((()))))((())))((()((())))())))()()(()))())()(()((()())(()(()()())())(()()))()))))(()())()()))()()()()))(()(()(()))))))()(()))()))()()(()((())(()(())))()(((())(())())))))()(()(()))))()))(()()()(())()(()(())))()))))()()(((((())))))())()())())())()())()))))()))))))))())()()()()()()())))()))((())()))())))()((())()))))()))())))))))())()()()))()()(()((((()(((((((()(())((()())((()()))()))))(())))()()()(())((())()())))(())))(())))(((()()))()(())(((()(()))((())))())()))((((()))())()))))))))()(())())))(()))()(()()))())()()(())())))())()()(()())))()((()())(()(())(())))))))))))))(()))))()))))))()()())(()(((((()(()())))())()))(()))()))(()()))()())(()))())()(())((()()))))))())))())()(((())))(()(()))()()))()(()))))))((()())(()))))))()())))()()))))))))((((((((()()()(()))))))()())))())))()()((())()))((())(())))())())))()()()((()((()(())))())()(())))))))))()())))()()()()()()))()))((())())(()(()))))))(()()))()))(())))()))))))))))))(()))))))))()))))()))()())()))()()))))))()))))((()))))(()))())()(())))(()())((((()())))()))))(()))()(()()(())))))())))))()))))))())))())))))())))())())))())(()))))(())()(())))())()))((()()))))))())))((())))))))())))(())))))()()())))))())))))()))))))()))()()()(()(((()())())())(()))())))))((()(())(()))))))))(())))()()()())())(()))))()()()))()))())())())()(())))()(((()((((())))))))()))))))))))))))))))))((())()())(()))))()()))))))(()()(())())))())))((())))((())))))))))))))()))))()(()))))))())))))()))(()()())(()())))))))))()))))))(())))))()()))()())(((())))()))(()))))))))(())())))())))())())())()()))((())()(())()())()))()())(())(()))))()())))(()(((()))))))()(()())()()()))()))))))))()()()(())()())()(((((()))()())())(()))))()()()(())))())))()((()())))(()))())()(()())())(()))()()))((()()))((()()()()())))(())()))(()(())))((()()))))))))())))))))())()()))))))))))))))))(())()(())(())()())())()))()(()))))())())))))()())()(()))()()(())))(())())))))(()))))))))))))))())())(())(())))(((()))()))))())((())(()))())))))))())))))())))()))()))))))))))))())()))))()))))((()))(())))()(())))(())()))()))())))())))))))()(()())())))()()())))(())))))(()))))))))))))(()))()))()))())))(((()()()(())((()())))()())(((()))(())()))((()()()())))())(())(()))))()(((((())))(()))())())))))))((((()()()))())())()(()(()())))))))))()())())))(())))()())(((()(())())()()))())())))))))((()())((()()(()))(()(())))()))()))(()))(()))()()(()(((())((((()))()(()))((())()(()(()())()(()))()())))))(()))()))())()())))())))(())))((())(()())))))()))(())(()))()())()(()()((()(()))))))()(())(()())(())()))(((())()))(()()(()()()))))(()(())))()))))())))))())(()()()()()()(((())))(()()))()((())(((((()()())))(()))(()))()()))(((())())()(((()()()()))))(()))(())())))()())(()()())())))))))()))))((())))()())(()))(()(()))())))))())(())))))()()())())()))()()(())))(()))(())((((((())(()))(()))())()))(()()(())))()))(()()))()))()(())))(())))((()(()))(())()()())())))(((()()())(())()))))))()(((()(((((()()(((())(())))())()((()))))((()())()(())(((())))(((()((()(()(()))(()()))())(()))(())(())))()))))))((((()))()((((()(()))()))()()))))()(()(()))()(()((()(((()(()()(((()))))()(((()(()(()(((()(()())())()()(()(()())())(()((((())(()))()))(((((()()())(())()((()()())))()()(((()()))()((((((((()(())))())((()))))(())))(()))))((()((((()()(())(((((()))(((((((((((((()())))((((()(((()((())())()))((()))()(()()((()()()()(()()(()(()(((())()(()((((((()((()()((())()((((()((()()(()()())((()()()((()((())()(()(((()((())((((())(()))((()(()))(()())()((((((((()(((((((((((()))(()(((()(()()()((((())((())()())()))(())((())(()))(((()((()(())))(()))))((()()))))((((()(()(()())(()(())((((((((()((((()((()(((((()))())()(()))(()()((()(())(((((()(())()(((((()()))))))()(((())()(()()((((())()((())((()(((())(((()))((()()((((()(())))))((()((((()((()((()(((())((()))(((((((()(((()((((((((())()))((((())(((((()((((((((()(((()((()(((()()(((()((((((()()(()((((((((()()(()(()(())((((()())()))))(((()))((((())((((()())((()(())()((()((((((()((((((()(())))()())(((())())())()(())()(()())((()()((((())((((((())(()(((((()((((())()((((()(()(())(()())(((())()((())((((()))()((((((())(()(((()(((()((((((()(((()))(()()())())((()((()())()((((())(((()(()(((((((((())(())))()((()()()()(())((()))(((((((()(((((((((()(()))))(()((((((((()((((()((()()((((((()()(((((((()(()(())()(())((()()()((()(((((()())()(((((()())()()((()(()())(()()()(((()()(((((()((((((()()((()(()()()((((((((((((()((((((((()()(((()())))()(((()()(())())((((()((((()((((()()()(())(())((()(()(((((((((((((((()(())(())))))()()))((()(((()(())((()(((()(()()((((()()(((()(((()(((((()()((()(()(((()))((((((()((((((((()((()((())(((((()(((())(())())((()()))((((())()()((()(((()(((((()()(((()))(((()(()(((((((((((((()))((((((((()(((()))))())((((((((((((())((())((()())(((())((())(()((((((((((()(((())((()()(()((())(((((((((((()))((((((((((((()(()())((()((()((()(()(((()((((((((()()(()((()(()(((()))((()))(((((((((((((()(())((((((())(((()(())(()(()(()((()()))((((()((((()((((())))())((((()((((()))((((((()((((((()((()(((())))((())(()))(()((()((((()((()(((()()))((((()()()(((((((())(((())(()))())((((()())(((()(((((((((((()(()(()((()(((((((((((((((()()((((()((((((((()(((()()((()((((()))(((()(())((((((()((((())()((((()((()))(())()(()(((()((())())((((((()(()(())())(((())(()(()())(((((()((()((())()())(())))(((()(())))))))(((()(((()))()((()(((()()((()())()()))())))(((()))(()(((()(((((((((()(()(((((()()(((()())()()))))()(((()))(((()(()(()(()(()))()(())()))(()(((())))(()))))))))))(())((()((())((()(())()(())((()()((((()()((()()))((())(((()((()(())(())))()(()(((((()((()))())()(((((()()(((()(()((((((())(()))(())()))((()(()()))(())())()))(((())))(()((()(((())(())())))((()()((((((((((((((()((()(()()(()(((()))())()()((()()()(())(()))(()())(((())((())()(())()()(()()(())))((()(((()))))(((()()(()()))())((()((())()))((((()()()())((())))(((()(())(((((()(((((()((()(()((((()()(((()()()(((()())(((()()((((())(()))(((()))(())())((()))(((()((()))(((()()((())((()(((((()((((()()())((()))()((((()((()(()()()(")
(princ "Aufgabe: ") (princ aufgabe) (terpri)
(princ "Lösung: ") (write (fahrten-iterativ aufgabe)) (terpri)

(princ "Nötige Fahrten bis erstes Untergeschoss: ") (write (fahre-bis -1 aufgabe)) (terpri)
